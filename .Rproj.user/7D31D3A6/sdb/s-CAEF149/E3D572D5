{
    "collab_server" : "",
    "contents" : "library(shiny)\nsource(file = \"global.R\", local = TRUE, encoding = \"UTF-8\")\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output, session) {\n\n    variables = reactiveValues(database = dt)\n    \n    # Data for showing\n    datasetInput <- reactive({\n        # If user did not upload file\n        if(is.null(input$upload)){\n            if(!is.null(input$line_name_selected)){\n                showDt <- filter(ConverToShow(variables$database), 路線名称 %in% input$line_name_selected)\n            } else {\n                return(ConverToShow(variables$database))\n            }\n        } else {\n            # Else show user's file\n            req(input$upload)\n            tmpDt <- fread(file = input$upload$datapath, header = TRUE)\n            print(nrow(tmpDt))\n            # Using upload file select info to update local database\n            if(sum(variables$database$select) == 0){\n                stationCode <- tmpDt[which(tmpDt$select == 1), ]$station_cd\n                if(length(stationCode)) {\n                    variables$database[variables$database$station_cd %in% stationCode, ]$select <- 1\n                }\n            }\n            # If line selection has been modify\n            if(length(input$line_name_selected)){\n                tmpDt <- filter(variables$database, line_name %in% input$line_name_selected)\n            }\n            ConverToShow(tmpDt)\n        }\n    })\n    # Reactive summary table\n    summaryTable <- reactive({\n        tmpDt <- variables$database %>% \n            group_by(\"都道府県コード\" = pref_cd) %>% \n            summarise(\"駅数\" = n(),\n                      \"チェックイン済\" = round(sum(select)),\n                      \"コンプ率\" = paste(round(`チェックイン済`/`駅数`*100, 2), \"%\")\n                      )\n        tmpDt %>% mutate(\"都道府県\" = prefCSV[都道府県コード]$pref_name) %>%\n            select(\"都道府県\", \"駅数\", \"チェックイン済\", \"コンプ率\")\n    })\n    # Reactive summary plot\n    summaryPlot <- reactive({\n        dtForPlot <- variables$database %>% \n            group_by(pref_cd) %>% \n            summarise(rate = sum(select)/n() * 100)\n    })\n    \n    # \n    output$summaryPlot <- renderPlot({\n        data <- summaryPlot()$rate\n        # Color scale\n        vals <- unique(scales::rescale(c(data)))\n        o <- order(vals, decreasing = FALSE)\n        cols <- scales::col_numeric(\"Blues\", domain = NULL)(vals)\n        colz <- setNames(data.frame(vals[o], cols[o]), NULL)\n        colz <- as.character(colz[,2])\n        if(0 %in% data) {\n            colz[1] <- \"#FFFFFF\"\n        }\n        colz <- c(\"#FFFFFF\", colz)\n        \n        # list\n        plotData <- sort(unique(data))\n        \n        # Plot\n        color.map3(data, plotData, colz)\n    })\n    \n    \n    # Data for download\n    datasetDownload <- reactive({\n        if(!is.null(input$line_name_selected)){\n            downloadDt <- filter(variables$database, line_name %in% input$line_name_selected)\n        } else {\n            return(variables$database)\n        }\n    })\n    \n    # Showing data table in main panel\n    output$table <- DT::renderDataTable({\n        #dt <- datasetInput()\n        preSelect <- which(datasetInput()$チェックイン == 1)\n        #print(head(datasetInput()))\n        DT::datatable(datasetInput(), \n                      selection = list(mode = \"multiple\", \n                                       selected = preSelect, \n                                       target = \"row\"))\n        #DT::datatable(datasetInput())\n    })\n    \n    # Text Console\n    #output$test <- renderText({\n    #    input$table_rows_selected\n    #})\n    \n    # Select summary\n    output$summary <- DT::renderDataTable({\n        summaryTable()\n    })\n    # Download function in side panel\n    output$downloadData <- downloadHandler(\n        filename = function() {\n            paste(Sys.Date(), \"-ekimemo.csv\", sep = \"\")\n        },\n        content = function(file) {\n            write.csv(datasetDownload(), file, row.names = FALSE)\n        }\n    )\n    \n    observeEvent(input$update, {\n        lineNumber = input$table_rows_selected\n        if(is.null(lineNumber)){\n            variables$database$select <- 0\n        } else {\n            stationCode <- datasetInput()[lineNumber, \"駅コード\"]\n            variables$database[variables$database$station_cd %in% stationCode, ]$select <- 1\n            variables$database[!variables$database$station_cd %in% stationCode, ]$select <- 0\n        }\n    })\n    \n    observe({\n        if(!is.null(input$upload)){\n            updateSelectInput(session, \"line_name_selected\",\n                              label = \"線路選択：\",\n                              choices = unique(dt$line_name),\n                              selected = unique(datasetInput()$路線名称))\n        }\n    })\n})\n",
    "created" : 1509943224999.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "141872514",
    "id" : "E3D572D5",
    "lastKnownWriteTime" : 1510058630,
    "last_content_update" : 1510058630791,
    "path" : "D:/ekimemo/Ekimemo/server.R",
    "project_path" : "Ekimemo/server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}