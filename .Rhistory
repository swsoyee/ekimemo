runApp()
runApp()
View(lineCSV)
runApp()
View(lineCSV)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
data = c(1,2,3,4,100)
vals <- unique(scales::rescale(c(data)))
vals
data = c(1,2,3,4,100,2,3,1)
vals <- unique(scales::rescale(c(data)))
vals
o <- order(vals, decreasing = FALSE)
o
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
cols
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
plotData <- sort(unique(data))
color.map3(data, plotData, colz)
setwd("D:/ekimemo/Ekimemo")
color.map3(data, plotData, colz)
data = c(1,2,3,4,2,3,1)
vals <- unique(scales::rescale(c(data, 100)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
plotData <- sort(unique(data))
color.map3(data, plotData, colz)
data <- c(1,2,5,2,4,6)
100 %in% data
!100 %in% data
data <- c(1,2,5,2,4,6)
if(!100 %in% data){
vals <- unique(scales::rescale(c(data, 100)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
} else {
vals <- unique(scales::rescale(c(data)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
}
colz
colz[1:length(colz)-1]
data <- c(1,2,5,2,4,6)
# Color scale
if(!100 %in% data){
vals <- unique(scales::rescale(c(data, 100)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
colz[1:length(colz)-1]
} else {
vals <- unique(scales::rescale(c(data)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
}
# list
plotData <- sort(unique(data))
# Plot
color.map3(data, plotData, colz)
data <- c(1,2,5,2,4,6)
# Color scale
if(!100 %in% data){
vals <- unique(scales::rescale(c(data, 100)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
colz <- colz[1:length(colz)-1]
} else {
vals <- unique(scales::rescale(c(data)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
}
# list
plotData <- sort(unique(data))
# Plot
color.map3(data, plotData, colz)
data <- c(1,2,5,2,4,6,100)
# Color scale
if(!100 %in% data){
vals <- unique(scales::rescale(c(data, 100)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
colz <- colz[1:length(colz)-1]
} else {
vals <- unique(scales::rescale(c(data)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
}
# list
plotData <- sort(unique(data))
# Plot
color.map3(data, plotData, colz)
data <- c(1,2,5,2,4,6,100)
makeColor <- function(vals) {
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
}
# Color scale
if(!100 %in% data){
vals <- unique(scales::rescale(c(data, 100)))
colz <- makeColor(vals)
colz <- colz[1:length(colz)-1]
} else {
vals <- unique(scales::rescale(c(data)))
colz <- makeColor(vals)
}
# list
plotData <- sort(unique(data))
# Plot
color.map3(data, plotData, colz)
data <- c(1,2,5,2,4,6)
makeColor <- function(vals) {
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Reds", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
colz <- as.character(colz[,2])
if(0 %in% data) {
colz[1] <- "#FFFFFF"
}
colz <- c("#FFFFFF", colz)
}
# Color scale
if(!100 %in% data){
vals <- unique(scales::rescale(c(data, 100)))
colz <- makeColor(vals)
colz <- colz[1:length(colz)-1]
} else {
vals <- unique(scales::rescale(c(data)))
colz <- makeColor(vals)
}
# list
plotData <- sort(unique(data))
# Plot
color.map3(data, plotData, colz)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(iris)
data
as.factor(data)
runApp()
runApp()
runApp()
shiny::runApp('Ekimemo')
runApp('Ekimemo')
tmpDt <- dt %>%
mutate(e_status.x.name = switch(e_status.x,
0 == "運用中",
1 == "運用前",
2 == "廃止"))
tmpDt <- dt %>%
mutate(e_status.x.name = case_when(
(e_status.x ~ 0) ~ "運用中",
(e_status.x ~ 1) ~ "運用前",
(e_status.x ~ 2) ~ "廃止"))
tmpDt <- dt %>%
mutate(e_status.x.name = case_when(
(e_status.x == 0) ~ "運用中",
(e_status.x == 1) ~ "運用前",
(e_status.x == 2) ~ "廃止"))
View(tmpDt)
runApp('Ekimemo')
View(tmpDt)
tmpDt %>% select("駅コード" = station_cd,
"駅名称" = station_name,
"住所" = add,
"駅状態" = e_status.x.name,
"事業者コード" = company_cd,
"路線名称" = line_name,
"チェックイン" = select)
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
shiny::runApp('Ekimemo')
setwd("D:/ekimemo/Ekimemo")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tmpDt <- dt %>%
mutate("駅状態" = case_when(
(e_status.x == 0) ~ "運用中",
(e_status.x == 1) ~ "1",
(e_status.x == 2) ~ "2"))
View(tmpDt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- c(1,2,4,24,5,3)
data
factor(data)
runApp()
dt <- left_join(stationCSV, lineCSV, by = "line_cd") %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add,
lon.x, lat.x, factor(e_status.x), company_cd, line_name, lon.y, lat.y, zoom, e_status.y) %>%
mutate(select = 0)
dt <- left_join(stationCSV, lineCSV, by = "line_cd") %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add,
lon.x, lat.x, factor(~e_status.x), company_cd, line_name, lon.y, lat.y, zoom, e_status.y) %>%
mutate(select = 0)
?fread
intergar
intergar(0)
lineCSV <- fread(file = "db\\line20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("character", "factor", "character", "character",
"character","character","character","logical",
"numeric","numeric","integer","factor","character"))
View(lineCSV)
runApp()
runApp()
lineCSV <- fread(file = "db\\line20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("int", "factor", "character", "character",
"character","character","character","logical",
"numeric","numeric","integer","factor","character"))
lineCSV <- fread(file = "db\\line20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("integer", "factor", "character", "character",
"character","character","character","logical",
"numeric","numeric","integer","factor","character"))
runApp()
stationCSV <- fread(file = "db\\station20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("character","character","character","logical",
"logical","integar", "factor","character",
"character","numeric","numeric","character",
"character","factor","character",))
stationCSV <- fread(file = "db\\station20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("character","character","character","logical",
"logical","integar", "factor","character",
"character","numeric","numeric","character",
"character","factor","character"))
runApp()
stationCSV <- fread(file = "db\\station20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("character","character","character","logical",
"logical","integar", "factor","character",
"character","numeric","numeric","character",
"character","factor","character"))
stationCSV <- fread(file = "db\\station20170403free.csv",
header = TRUE,
encoding = "UTF-8",
colClasses = c("character","character","character","logical",
"logical","integer", "factor","character",
"character","numeric","numeric","character",
"character","factor","character"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tmpDt <- dt %>%
mutate(e_status.x.name = case_when(
(e_status.x == 0) ~ "使用中",
(e_status.x == 1) ~ "使用前",
(e_status.x == 2) ~ "廃止"))
showDt <- tmpDt %>% select("駅コード" = station_cd,
"駅名称" = station_name,
"住所" = add,
"駅状態" = e_status.x.name,
"事業者コード" = company_cd,
"路線名称" = line_name,
"チェックイン" = select)
showDt
runApp()
runApp()
showDt$駅状態 <- factor(showDt$駅状態)
head(showDt)
runApp()
tmpDt <- dt %>%
mutate(e_status.x.name = as.factor(case_when(
(e_status.x == 0) ~ "使用中",
(e_status.x == 1) ~ "使用前",
(e_status.x == 2) ~ "廃止")))
tmpDt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(dt)
dt %>% group_by(pref_cd) %>% summarise(n())
dt %>% group_by(pref_cd) %>% summarise(unique(station_g_cd))
class(dt)
dt1 <- data.table(dt)
class(dt1)
dt %>% group_by(pref_cd) %>% summarise(n_distinct())
dt %>% group_by(pref_cd) %>% summarise(n_distinct(station_g_cd))
runApp()
?n_distinct
dt[which(dt$select == 1),]$station_g_cd
runApp()
tmpDt <- dt %>%
group_by("都道府県コード" = pref_cd) %>%
summarise("駅数" = n_distinct(station_g_cd),
"チェックイン済" = n_distinct(dt[which(dt$select == 1),]$station_g_cd),
"コンプ率（%）" = round(`チェックイン済`/`駅数`*100, 2)
)
View(tmpDt)
dt1 <- fread("2017-11-07-ekimemo-seili-10-21.csv")
dt1 <- fread("d://2017-11-07-ekimemo-seili-10-21.csv")
tmpDt <- dt1 %>%
group_by("都道府県コード" = pref_cd) %>%
summarise("駅数" = n_distinct(station_g_cd),
"チェックイン済" = n_distinct(dt[which(dt$select == 1),]$station_g_cd),
"コンプ率（%）" = round(`チェックイン済`/`駅数`*100, 2)
)
tmpDt <- dt1 %>%
group_by("都道府県コード" = pref_cd) %>%
summarise("駅数" = n_distinct(station_g_cd),
"チェックイン済" = n_distinct(dt1[which(dt1$select == 1),]$station_g_cd),
"コンプ率（%）" = round(`チェックイン済`/`駅数`*100, 2)
)
dt1[which(dt1$select == 1),]$station_g_cd
nrow(dt1[which(dt1$select == 1),])
nrow(dt1)
unique(dt1[which(dt1$select == 1),]$station_g_cd)
length(unique(dt1[which(dt1$select == 1),]$station_g_cd))
tmpDt <- dt1 %>%
group_by("都道府県コード" = pref_cd) %>%
summarise("駅数" = n_distinct(station_g_cd),
"チェックイン済" = n_distinct(dt1[which(select == 1),]$station_g_cd),
"コンプ率（%）" = round(`チェックイン済`/`駅数`*100, 2)
)
tmpDt <- dt1 %>%
group_by("都道府県コード" = pref_cd) %>%
summarise("駅数" = n_distinct(station_g_cd),
"チェッ" = n_distinct(dt1[which(select == 1),]$station_g_cd),
"チェックイン済" = uniqueN(station_g_cd[select == 1]),
"コンプ率（%）" = round(`チェックイン済`/`駅数`*100, 2)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fileInput
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
1!=2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
