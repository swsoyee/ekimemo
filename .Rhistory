lineCSV <- fread(file = "db\\line20170403free.csv", header = TRUE, encoding = "UTF-8")
stationCSV <- fread(file = "db\\station20170403free.csv", header = TRUE, encoding = "UTF-8")
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
vector("list", 2)
runApp('Ekimemo')
runApp('Ekimemo')
text <- "東京メトロ千代田線"
line_selected_name <- "東京メトロ千代田線"
line_selected_code <- 28005
station_selected <- sapply(line_selected_code,
function(x) {
station_code <- as.character(stationCSV[stationCSV$line_cd == x, ]$station_cd)
names(station_code) <- stationCSV[stationCSV$line_cd == x, ]$station_name
station_code
})
View(station_selected)
station_selected[[line_selected_code[1]]]
line_selected_code
line_selected_code[0]
line_selected_code[1]
station_selected
station_selected[[]]
station_selected[[1]]
View(station_selected)
class(station_selected)
list(station_selected)
line_selected <- head(lineCSV$line_name, n = 20)
line_selected_code <- as.character(line_selected)
station_selected <- sapply(line_selected_code,
function(x) {
station_code <- as.character(stationCSV[stationCSV$line_cd == x, ]$station_cd)
names(station_code) <- stationCSV[stationCSV$line_cd == x, ]$station_name
station_code
})
station_selected
station_selected[[line_selected_code[15]]]
line_selected_code
line_selected_code[15]
station_selected[[]]
station_selected
station_selected[[line_selected_code[15]]]
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp('Ekimemo')
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
quote(selectInput("c", "first set of choices", choices = list("cat","dog","house")
)
)
shinyApp(ui = ui, server = server)
#server.R
library(shiny)
library(ggplot2)
server <- shinyServer(function(input, output, session) {
output$checks <- renderText(input$checkbox)
output$plots <- renderUI({
plot_output_list <-
lapply(input$checkbox,
function(i){
plotOutput(paste0("plot", i))
})
do.call(tagList, plot_output_list)
})
observe({
for (i in input$checkbox) {
local({
local_i <- i
output[[paste0("plot", local_i)]] <-
renderPlot({
qplot(x = rnorm(100, mean = as.numeric(local_i))) +
ggtitle(paste("This plot was plotted with", local_i, "option"))
})
})
}
})
})
#ui.R
library(shiny)
ui <- shinyUI(fluidPage(
title = 'lapply example',
sidebarLayout(
sidebarPanel(
checkboxGroupInput("checkbox", "Checkbox",
choices = sample(1:10, 5))
),
mainPanel(
verbatimTextOutput("checks"),
uiOutput('plots')
)
)
))
shinyApp(ui = ui, server = server)
runApp('Ekimemo')
View(lineCSV)
View(stationCSV)
runApp('Ekimemo')
runApp('Ekimemo')
if(c("as","asa"))
)
test <- list(a = c("1001","2002"), b = c("3003","4004"))
test
test$c
is.null(test$c)
!is.null(test$c)
test <- list(a = c("1001","2002"), b = c("3003","4004"), c = NULL)
test
test$a
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
test
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
for(i in c(1,2,3)) {
i
}
for(i in c(1,2,3)) {
print(i)
}
for(i in lineCSV$line_name) {
print(i)
}
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
shiny::runApp('Ekimemo')
View(stationCSV)
runApp(list(ui={
library(shiny)
#ui.R
ui.r<-shinyUI(
pageWithSidebar(
headerPanel("shinyUI"),
sidebarPanel(
uiOutput("choose_country"),
uiOutput("choose_city")
),
mainPanel(
headerPanel("mainPanel")
#, checkboxGroupInput('currentselection', 'Current Selection', choices = c('None'),selected=c(''))
)
))
},
server={
library(shiny)
#server.R
countries <- c('India','England','USA')
countrycity<-list()
countrycity[[countries[1]]]<-c('None','New Delhi','Mumbai')
countrycity[[countries[2]]]<-c('None','London','Birmingham')
countrycity[[countries[3]]]<-c('None','New York','Washington DC')
#Alphabetize (Optional)
order_cities<-order(countries)
countries<-countries[order_cities]
countrycity<-countrycity[order_cities]
countrycity<-lapply(countrycity,sort)
countrycitySelection<-list()
for(country in countries){
countrycitySelection[[country]]<-'None'
}
server.ui<-shinyServer(function(input, output,session) {
values <- reactiveValues(countrycitySelection = countrycitySelection)
# Drop-down selection box for Country Selection
output$choose_country <- renderUI({
selectInput("choose_country", "Select Country", as.list(countries))
})
# City Selection
output$choose_city <- renderUI({
# If missing input, return to avoid error later in function
if(is.null(input$choose_country))
return()
# Get the data set with the appropriate name
selected_country <- input$choose_country
cities<-countrycity[[selected_country]]
# Create the drop-down menu for the city selection
selectInput("choose_city", "Choose city",
choices  = as.list(cities),selected = NULL, multiple = FALSE,
selectize = TRUE, width = NULL)
})
#changing country selection
observe({
country <- input$choose_country
if(is.null(country)) return()
isolate({
updateSelectInput(session, "choose_city", choices = countrycity[[country]]
,selected = values$countrycitySelection[[country]]   )
})#iso
})#obs
#changing city selection
observe({
city <- input$choose_city
if(is.null(city)) return()
isolate({
country<-input$choose_country
values$countrycitySelection[[country]]<-city
})#iso
})#obs
})
}
))
runApp(list(ui={
library(shiny)
#ui.R
ui.r<-shinyUI(
pageWithSidebar(
headerPanel("shinyUI"),
sidebarPanel(
uiOutput("choose_country"),
uiOutput("choose_city")
),
mainPanel(
headerPanel("mainPanel")
#, checkboxGroupInput('currentselection', 'Current Selection', choices = c('None'),selected=c(''))
)
))
},
server={
library(shiny)
#server.R
countries <- c('India','England','USA')
countrycity<-list()
countrycity[[countries[1]]]<-c('None','New Delhi','Mumbai')
countrycity[[countries[2]]]<-c('None','London','Birmingham')
countrycity[[countries[3]]]<-c('None','New York','Washington DC')
#Alphabetize (Optional)
order_cities<-order(countries)
countries<-countries[order_cities]
countrycity<-countrycity[order_cities]
countrycity<-lapply(countrycity,sort)
countrycitySelection<-list()
for(country in countries){
countrycitySelection[[country]]<-'None'
}
server.ui<-shinyServer(function(input, output,session) {
values <- reactiveValues(countrycitySelection = countrycitySelection)
# Drop-down selection box for Country Selection
output$choose_country <- renderUI({
selectInput("choose_country", "Select Country", as.list(countries))
})
# City Selection
output$choose_city <- renderUI({
# If missing input, return to avoid error later in function
if(is.null(input$choose_country))
return()
# Get the data set with the appropriate name
selected_country <- input$choose_country
cities<-countrycity[[selected_country]]
# Create the drop-down menu for the city selection
selectInput("choose_city", "Choose city",
choices  = as.list(cities),selected = NULL, multiple = FALSE,
selectize = TRUE, width = NULL)
})
#changing country selection
observe({
country <- input$choose_country
if(is.null(country)) return()
isolate({
updateSelectInput(session, "choose_city", choices = countrycity[[country]]
,selected = values$countrycitySelection[[country]]   )
})#iso
})#obs
#changing city selection
observe({
city <- input$choose_city
if(is.null(city)) return()
isolate({
country<-input$choose_country
values$countrycitySelection[[country]]<-city
})#iso
})#obs
})
}
))
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
contrycity
countrycity
countrycity[["London"]]
countrycity["London"]
countrycity$"London"
countrycity$London
countrycity$England
countrycity$"England"
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
View(stationCSV)
library(dplyr)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[line_cd == lineCSV$line_cd, ]$line_name)
lineList <- list(lineCSV$line_name = lineCSV$line_cd)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[which(line_cd == lineCSV$line_cd)]$line_name)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[stationCSV$line_cd == lineCSV$line_cd)]$line_name)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[stationCSV$line_cd == lineCSV$line_cd), ]$line_name)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[stationCSV$line_cd == lineCSV$line_cd, ]$line_name)
lineList <- list(lineCSV$line_cd)
names(lineList) <- lineCSV$line_name
lineList <- as.list(lineCSV$line_cd)
names(lineList) <- lineCSV$line_name
lineList[[1001]]
lineList <- as.list(lineCSV$line_name)
names(lineList) <- lineCSV$line_cd
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineList$line_cd)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineList$`line_cd`)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = line_cd %in% lineCSV$line_cd)
View(dt)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[line_cd == lineCSV$line_cd, ]$line_name)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineCSV[line_cd %in%lineCSV$line_cd, ]$line_name)
lineList$`1003`
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineList$`line_cd`)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineList$line_cd)
lineList <- as.data.frame(lineCSV$line_name)
names(lineList) <- lineCSV$line_cd
lineList <- as.data.frame(lineCSV$line_name, lineCSV$line_cd)
lineList <- data.frame(lineCSV$line_name, lineCSV$line_cd)
lineList <- data.frame(lineCSV$line_name, lineCSV$line_cd, stringsAsFactors = F)
View(lineList)
lineList <- data.frame(line_name = lineCSV$line_name,
line_cd = lineCSV$line_cd,
stringsAsFactors = F)
View(lineList)
dt <- stationCSV %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add, lon, lat, e_status) %>%
mutate(line_name = lineList[line_cd == lineList$line_cd, ]$line_name)
dt <- inner_join(stationCSV, lineCSV)
dt <- inner_join(stationCSV, lineCSV, by = "line_cd")
View(dt)
?inner_join()
dt <- left_join(stationCSV, lineCSV, by = "line_cd")
dt <- left_join(stationCSV, lineCSV, by = "line_cd") %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add,
lon,x, lat.x, e_status.x, company_cd, line_name, lon.y, lat.y, zoom, e_status.y)
dt <- left_join(stationCSV, lineCSV, by = "line_cd") %>%
select(station_cd, station_g_cd, station_name, line_cd, pref_cd, post, add,
lon.x, lat.x, e_status.x, company_cd, line_name, lon.y, lat.y, zoom, e_status.y)
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
showDt <- dt %>%
select("駅名称" = station_name,
"住所" = add,
"駅状態" = e_status.x,
"事業者コード" = company_cd,
"路線名称" = line_name,
"路線状態" = e_status.y)
showDt["路線名称" == "JR江差線", ]
showDt
head(showDt)
showDt[showDt$駅名称 == "JR江差線", ]
showDt[showDt$路線状態 == 2, ]
showDt[showDt$路線名称 == "JR江差線", ]
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
Sys.Date()
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
runApp('Ekimemo')
